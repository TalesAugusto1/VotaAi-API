// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  email     String   @unique
  password  String
  avatarImage Bytes?
  role      Int      @default(1)  // 1: normal user, 2: admin user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  votes     Vote[]
  // Track participation in anonymous voting pools
  votingParticipation VotingParticipation[]

  @@index([role]) // Add index for filtering users by role
}

model VotingPool {
  id          String   @id @default(uuid())
  title       String
  description String   @db.VarChar(5000)  // Specify a larger varchar instead of Text
  category    String
  image       Bytes?
  startDate   DateTime
  endDate     DateTime
  anonymous   Boolean  @default(false)
  status      String   // "active", "upcoming", "closed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  options     VotingOption[]
  votes       Vote[]
  // Track user participation in anonymous pools
  participation VotingParticipation[]
  
  // Location data
  latitude    Float?
  longitude   Float?
  address     String?

  // Add indexes for frequently queried fields
  @@index([status]) // Most important index for filtering by status
  @@index([startDate, endDate]) // For date-based status calculation
  @@index([category]) // For filtering by category
  @@index([createdAt]) // For sorting by creation date
}

model VotingOption {
  id          String   @id @default(uuid())
  text        String
  description String?   @db.VarChar(5000)  // Specify a larger varchar instead of Text
  image       Bytes?
  
  // Relations
  votingPool  VotingPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  poolId      String
  votes       Vote[]

  @@index([poolId]) // Optimize fetching options for a specific pool
}

model Vote {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  
  // Relations - these will be null for anonymous votes
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  
  // Always required
  votingPool VotingPool @relation(fields: [poolId], references: [id])
  poolId     String
  option     VotingOption @relation(fields: [optionId], references: [id])
  optionId   String
  
  @@unique([userId, poolId]) // Ensure one vote per user per poll
  
  // Add indexes for statistics and searching
  @@index([poolId]) // For counting votes per pool
  @@index([optionId]) // For counting votes per option
  @@index([userId]) // For finding a user's votes
  @@index([timestamp]) // For ordering by time
}

// New model to track user participation in anonymous polls
model VotingParticipation {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  
  votingPool VotingPool @relation(fields: [poolId], references: [id])
  poolId     String
  
  @@unique([userId, poolId]) // Ensure one participation record per user per poll
  
  // Add indexes for performance
  @@index([userId]) // For finding all pools a user participated in
  @@index([poolId]) // For finding all users who participated in a pool
  @@index([timestamp]) // For sorting by timestamp
}
